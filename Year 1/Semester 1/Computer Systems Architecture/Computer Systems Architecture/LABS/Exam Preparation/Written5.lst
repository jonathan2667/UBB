     1                                  ;se da un sir de qwords si un n de la tastatura
     2                                  ;identifica al n+1 lea qword si stocheaza partrea superioada/inferioara daca n e par/impar
     3                                  ;dupa descompui in bytes si vezi cati de 1 are fiecare byte in repr binara, afisezi sirul sortat descrescator
     4                                  
     5                                  bits 32
     6                                  
     7                                  global start 
     8                                  
     9                                  extern exit, scanf, printf
    10                                  import exit msvcrt.dll
    11                                  import scanf msvcrt.dll
    12                                  import printf msvcrt.dll
    13                                  
    14                                  
    15                                  segment data use32 class = data
    16 00000000 00000000                    n dd 0
    17 00000004 01000000000000005D-         s dq 1, 1011101b,1122334455667788h,5566778811223344h,77788889h,12345678987654h,12345678h,9876543456789h
    17 0000000D 000000000000008877-
    17 00000016 665544332211443322-
    17 0000001F 118877665589887877-
    17 00000028 000000005476987856-
    17 00000031 341200785634120000-
    17 0000003A 000089674543658709-
    17 00000043 00                 
    18 00000044 256400                      read db "%d", 0
    19 00000047 257800                      print db "%x", 0
    20                                      
    21                                  segment code use32 class = code
    22                                  start:
    23                                      
    24 00000000 68[00000000]                push dword n
    25 00000005 68[44000000]                push dword read
    26 0000000A FF15[00000000]              call [scanf]
    27 00000010 83C408                      add esp, 4 * 2
    28                                      
    29 00000013 BE[04000000]                mov esi, s
    30                                      
    31 00000018 8B1D[00000000]              mov ebx, dword [n]
    32 0000001E 83E301                      and ebx, 1
    33 00000021 83FB01                      cmp ebx, 1
    34 00000024 740C                        je impar
    35                                      
    36 00000026 8B1D[00000000]              mov ebx, dword [n]
    37 0000002C 8B44DE04                    mov eax, [ESI + 8  * ebx + 4]
    38                                      
    39 00000030 EB09                        jmp final
    40                                      impar:
    41                                      
    42 00000032 8B1D[00000000]              mov ebx, dword [n]
    43 00000038 8B04DE                      mov eax, [ESI + 8  * ebx]
    44                                      
    45                                  final:
    46 0000003B 50                          push eax
    47 0000003C 68[47000000]                push print
    48 00000041 FF15[00000000]              call [printf]
    49 00000047 83C408                      add esp, 4 * 2
    50                                      
    51 0000004A 6A00                        push dword 0
    52 0000004C FF15[00000000]              call [exit]
