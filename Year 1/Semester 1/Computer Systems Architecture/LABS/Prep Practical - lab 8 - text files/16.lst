     1                                  bits 32
     2                                  
     3                                  global start
     4                                  
     5                                  extern exit, fopen, fprintf, fclose, printf, scanf, fscanf, fgetc
     6                                  import exit msvcrt.dll
     7                                  import fopen msvcrt.dll
     8                                  import fprintf msvcrt.dll
     9                                  import fclose msvcrt.dll
    10                                  import exit msvcrt.dll    
    11                                  import printf msvcrt.dll    ; tell the assembler that function printf is found in msvcrt.dll library
    12                                  import scanf msvcrt.dll     ; similar for scanf
    13                                  import fscanf msvcrt.dll  
    14                                  import fgetc msvcrt.dll  
    15                                  
    16                                  
    17                                  segment data use32 class=data
    18 00000000 FFFFFFFF                    EOF dd -1
    19 00000004 4E756D6172756C2064-         print db "Numarul de x: %d si y: %d", 0
    19 0000000D 6520783A2025642073-
    19 00000016 6920793A20256400   
    20 0000001E 3136202D2072656164-         file_name_read db "16 - read.txt", 0
    20 00000027 2E74787400         
    21 0000002C 7200                        acces_mode_read db "r", 0
    22 0000002E 3136202D2077726974-         file_name_write db "16 - write.txt", 0
    22 00000037 652E74787400       
    23 0000003D 7700                        acces_mode_write db "w", 0
    24 0000003F FFFFFFFF                    file_descriptor_read dd -1
    25 00000043 FFFFFFFF                    file_descriptor_write dd -1
    26 00000047 <res 00000064>              buffer resb 100
    27 000000AB 00000000                    buffer_pos dd 0
    28 000000AF 78203D202564207920-         string_write db "x = %d y = %d", 0
    28 000000B8 3D20256400         
    29 000000BD 257300                      string_read db "%s", 0
    30 000000C0 00000000                    y_total dd 0
    31 000000C4 00000000                    z_total dd 0
    32                                      
    33                                  segment code use32 class=code
    34                                  start:
    35 00000000 68[2C000000]                push dword acces_mode_read
    36 00000005 68[1E000000]                push dword file_name_read
    37 0000000A FF15[00000000]              call [fopen]
    38 00000010 83C408                      add esp, 4 * 2
    39                                      
    40 00000013 83F800                      cmp eax, 0
    41 00000016 0F848D000000                je final
    42                                      
    43 0000001C A3[3F000000]                mov [file_descriptor_read], eax
    44                                      
    45                                      
    46                                      
    47 00000021 68[3D000000]                push dword acces_mode_write
    48 00000026 68[2E000000]                push dword file_name_write
    49 0000002B FF15[00000000]              call [fopen]
    50 00000031 83C408                      add esp, 4 * 2
    51                                      
    52 00000034 83F800                      cmp eax, 0
    53 00000037 7470                        je final
    54                                      
    55 00000039 A3[43000000]                mov [file_descriptor_write], eax
    56                                      
    57                                      
    58                                      
    59                                  read: 
    60 0000003E FF35[3F000000]              push dword [file_descriptor_read]
    61 00000044 FF15[00000000]              call [fgetc]
    62 0000004A 83C404                      add esp, 4
    63                                      
    64 0000004D 83F8FF                      cmp eax, -1
    65 00000050 7428                        je printing
    66                                      
    67 00000052 3C79                        cmp al, 'y'
    68 00000054 7506                        jne next_maybe_y
    69 00000056 FF05[C0000000]              inc dword [y_total]
    70                                  next_maybe_y:
    71 0000005C 3C7A                        cmp al, 'z'
    72                                      
    73 0000005E 7506                        jne neither_z_y
    74 00000060 FF05[C4000000]              inc dword [z_total]
    75                                      
    76                                  neither_z_y:
    77 00000066 8B0D[AB000000]              mov ecx, [buffer_pos]
    78 0000006C 8881[47000000]              mov [buffer + ecx], al
    79 00000072 FF05[AB000000]              inc dword [buffer_pos]
    80                                     
    81                                      
    82 00000078 EBC4                        jmp read
    83                                  
    84                                  printing:
    85 0000007A FF35[C0000000]              push dword [y_total]
    86 00000080 FF35[C4000000]              push dword [z_total]
    87 00000086 68[AF000000]                push dword string_write
    88 0000008B FF35[43000000]              push dword [file_descriptor_write]
    89 00000091 FF15[00000000]              call [fprintf]
    90 00000097 83C410                      add esp, 4 * 4
    91                                      
    92                                  close:
    93 0000009A FF35[43000000]              push dword [file_descriptor_write]
    94 000000A0 FF15[00000000]              call [fclose]
    95 000000A6 83C404                      add esp, 4
    96                                      
    97                                  final:
    98 000000A9 6A00                        push    dword 0    
    99 000000AB FF15[00000000]              call    [exit]     
   100                                      
