
bits 32 ;asamblare si compilare pentru arhitectura de 32 biti
; definim punctul de intrare in programul principal
global  start 

extern  exit 
import  exit msvcrt.dll
        
segment  data use32 class=data 
	a dw 19h
    b dw -3h
    c db 12h
    d db 2h
    e dd 1144h
    x dq 52234h
    
;1/a + 200*b - c/(d+1) + x/a - e 
; a,b-word; c,d-byte; e-doubleword; x-qword
;signed

segment  code use32 class=code 
start:

    mov dx, 0
    mov ax, 0
    
    mov ax, 1; ax = 1
    
    idiv word [a]; dx: ax, ax = 1 / [a], dx = 1 % [a]
    
    mov bx, ax; bx = ax = 0
    
    mov eax, 0
    mov ax, [b]; ax = FFFD
    
    mov edx, 0
    mov dx, 200
    imul dx; DX:AX ← AX * DX  ; FFFF FDA8
    
    ;FFFF FDA8 + 0
    add ax, bx; ax = ax + bx
    adc dx, 0  ; dx = dx + 0 - sbb
    
    push dx
    push ax
    pop eax 
    ; eax - > dx: ax
    mov ebx, eax; ebx = eax ; FFFF FDA8
    
    ;c/(d+1)
    mov eax, 0
    mov al, [c]
    mov ah, 0 ; ax = [c]
    
    mov ecx, 0
    mov cl, [d]
    inc cl
    
    idiv cl; al = ax / cl, ah, ax % cl = 6
    
    ;movzx eax, al; eax -> al
    cbw
    cwde ; eax = al
    
    sub ebx, eax; FFFF FDA8 - 6 = FFFF FDA2
    
    mov ax, [a]; ax =[a]
    cwde; eax = [a]
    mov ecx, eax ; ecx = [a]
    
    mov eax, 0
    mov edx, 0
    
    mov eax, [x]
    mov edx, [x + 4]
    
    ;x/a
    ; x qword, a word
    
    ;mov ecx, 0
    ;mov cx, [a]
    ;movzx ecx, cx
    
    idiv ecx; EAX ← EDX:EAX / ECX, EDX ← EDX:EAX % ECX  -> eax = 3491
    
    add ebx, eax
    mov eax, [e]
    sub ebx, eax;  20 EF
    
    
    
	push   dword 0 ;se pune pe stiva codul de retur al functiei exit
	call   [exit] ;apelul functiei sistem exit pentru terminarea executiei programului	